# src/api/webhooks/chatbot_webhook.py

import os
from fastapi import APIRouter, Depends, Header, HTTPException

from src.api.admin.socketio.emitters import emit_chatbot_config_update
# NOVO: Importe a fun√ß√£o de atualiza√ß√£o geral da loja
from src.api.admin.utils.emit_updates import emit_store_updates
from src.api.schemas.chatbot_config import ChatbotWebhookPayload
from src.core import models
from src.core.database import GetDBDep

# --- Crie um router S√ì para webhooks ---
router = APIRouter(prefix="/webhooks", tags=["Webhooks"])

WEBHOOK_SECRET_KEY = os.getenv("CHATBOT_WEBHOOK_SECRET")
if not WEBHOOK_SECRET_KEY:
    raise ValueError("A vari√°vel de ambiente CHATBOT_WEBHOOK_SECRET n√£o foi configurada.")


def verify_webhook_secret(x_webhook_secret: str = Header(...)):
    if x_webhook_secret != WEBHOOK_SECRET_KEY:
        raise HTTPException(status_code=403, detail="Acesso negado: Chave secreta do webhook inv√°lida.")


# --- A Rota de Webhook no lugar certo ---
@router.post(
    "/chatbot/update",
    summary="Webhook para receber atualiza√ß√µes do servi√ßo de Chatbot",
    dependencies=[Depends(verify_webhook_secret)],
    include_in_schema=False
)
async def chatbot_webhook(payload: ChatbotWebhookPayload, db: GetDBDep):
    """
    Esta rota √© chamada pelo servi√ßo de rob√¥ (Node.js) para nos dar
    o QR Code ou para nos informar que a conex√£o foi bem-sucedida.
    """

    print(f"ü§ñ Webhook do Chatbot recebido para loja {payload.lojaId}: status {payload.status}")
    store = db.query(models.Store).filter_by(id=payload.lojaId).first()
    if not store:
        print(f"‚ùå Loja {payload.lojaId} n√£o encontrada")
        return {"status": "erro", "message": "Loja n√£o encontrada"}

    # Validar status
    valid_statuses = ['awaiting_qr', 'connected', 'disconnected', 'error']
    if payload.status not in valid_statuses:
        print(f"‚ùå Status inv√°lido: {payload.status}")
        return {"status": "erro", "message": "Status inv√°lido"}

    config = db.query(models.StoreChatbotConfig).filter_by(store_id=payload.lojaId).first()
    if not config:
        config = models.StoreChatbotConfig(store_id=payload.lojaId)
        db.add(config)

    # Atualiza sempre o status
    config.connection_status = payload.status

    # NOVO: L√≥gica para limpar os dados em caso de desconex√£o ou erro
    if payload.status in ['disconnected', 'error']:
        config.last_qr_code = None
        config.whatsapp_name = None
        print(f"üßº Sess√£o limpa no banco de dados para a loja {payload.lojaId}.")
    else:
        # Mant√©m os dados atualizados nos outros casos
        config.last_qr_code = payload.qrCode
        config.whatsapp_name = payload.whatsappName

    db.commit()

    # 1. Notifica a p√°gina espec√≠fica de configura√ß√£o do chatbot
    await emit_chatbot_config_update(db, payload.lojaId)

    # NOVO: 2. Notifica a aplica√ß√£o sobre uma atualiza√ß√£o geral na loja
    # Isso atualizar√° listas de lojas, dashboards, etc.
    await emit_store_updates(db, store.id)

    print(f"‚úÖ Frontend notificado (espec√≠fico e geral) sobre a atualiza√ß√£o para loja {payload.lojaId}.")

    return {"status": "sucesso", "message": "Webhook processado."}
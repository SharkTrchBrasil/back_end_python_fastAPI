# Em: src/api/services/verification_service.py
import asyncio

from sqlalchemy.orm import Session
from src.core import models
from src.core.utils.enums import StoreVerificationStatus

class VerificationService:
    """
    Orquestra o processo de verifica√ß√£o de uma nova loja e seu respons√°vel.
    """
    def __init__(self, db: Session):
        self.db = db

    async def start_verification_process(self, store: models.Store, user: models.User):
        """
        M√©todo principal que inicia e gerencia todas as etapas de verifica√ß√£o.
        """
        print(f"üöÄ Iniciando processo de verifica√ß√£o para a loja ID: {store.id} e usu√°rio ID: {user.id}")

        # Etapa 1: Mudar o status para indicar que a verifica√ß√£o come√ßou
        store.verification_status = StoreVerificationStatus.PENDING
        self.db.add(store)
        self.db.commit()

        # Etapa 2: Validar os documentos (CPF e CNPJ)
        # Por enquanto, vamos simular uma verifica√ß√£o bem-sucedida.
        # No futuro, aqui entraria a chamada para uma API da Receita Federal, por exemplo.
        cnpj_valid = await self._verify_document(store.cnpj, "CNPJ")
        cpf_valid = await self._verify_document(user.cpf, "CPF")

        if not cnpj_valid or not cpf_valid:
            print(f"‚ùå Verifica√ß√£o de documentos falhou para a loja {store.id}.")
            store.verification_status = StoreVerificationStatus.REJECTED
            store.internal_notes = "Documento (CPF ou CNPJ) inv√°lido."
            self.db.commit()
            return

        # Etapa 3: Enviar e-mail de verifica√ß√£o
        # (Vamos adicionar a l√≥gica de envio de e-mail no pr√≥ximo passo)
        await self._send_verification_email(user)

        # Etapa 4 (Opcional): Se tudo at√© aqui for autom√°tico, podemos aprovar.
        # Ou manter como PENDING para uma revis√£o manual.
        # store.verification_status = StoreVerificationStatus.VERIFIED
        # self.db.commit()

        print(f"‚úÖ Processo de verifica√ß√£o para a loja {store.id} em andamento.")

    async def _verify_document(self, document: str | None, doc_type: str) -> bool:
        """
        Simula a verifica√ß√£o de um documento (CPF ou CNPJ).
        """
        if not document:
            print(f"AVISO: Documento do tipo {doc_type} n√£o fornecido. Pulando verifica√ß√£o.")
            return True # Ou False, se o documento for obrigat√≥rio

        print(f"üîé Verificando {doc_type}: {document}...")
        # L√ìGICA DE SIMULA√á√ÉO:
        # No mundo real, aqui voc√™ chamaria uma API externa.
        # Ex: response = await client.get(f"https://api.receita.gov.br/v1/{doc_type}/{document}")
        # if response.status_code != 200: return False
        await asyncio.sleep(2) # Simula a demora da chamada de rede
        print(f"üëç Documento {doc_type} {document} parece v√°lido.")
        return True

    async def _send_verification_email(self, user: models.User):
        """
        Simula o envio de um e-mail de verifica√ß√£o.
        """
        print(f"‚úâÔ∏è Enviando e-mail de verifica√ß√£o para {user.email}...")
        # L√ìGICA DE ENVIO DE E-MAIL:
        # Aqui voc√™ usaria uma biblioteca como 'fastapi-mail' para enviar um
        # e-mail com um link de confirma√ß√£o.
        # Ex: await fm.send_message(...)
        await asyncio.sleep(1)
        print(f"‚úÖ E-mail enviado para {user.email}.")